[build-system]
requires = ["setuptools>=65", "wheel", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "esgaliant"
version = "0.1.0"
description = "High-performance biological simulation and analysis framework"
readme = "README.md"
authors = [
    {name = "Patrick C.N. Martin", email = "patrick.martin@cshs.org"}
]
license = {text = "GNU3"}
requires-python = ">=3.11"
keywords = ["bioinformatics", "simulation", "single-cell", "genomics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

dependencies = [
    # Core numerical computing
    "numpy>=1.26,<3.0",
    "scipy>=1.11",
    # Performance & compilation
    "numba>=0.58",
    "jax>=0.4.20",
    "torch>=2.1",
    # Data handling
    "polars>=1.0",
    "zarr>=3.0.0",
    "zstd>=1.5.7",
    # Scientific computing
    "anndata>=0.10",
    "scanpy>=1.10",
    # Machine learning
    "sklearn-ann>=0.1.3",
    "pynndescent>=0.5",
    "umap-learn>=0.5",
    "leidenalg>=0.10",
    # Distributed computing
    "dask[complete]>=2024.1",
    "dask-ml>=2024.1",
    "distributed>=2024.1",
    "cellxgene-census>=1.17.0",
]

[project.optional-dependencies]
# Development tools
dev = [
    # Testing
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.5",
    "pytest-benchmark>=4.0",
    "hypothesis>=6.92",

    # Code quality
    "ruff>=0.1",
    "mypy>=1.8",
    "pre-commit>=3.6",

    # Profiling
    "scalene>=1.5",
    "line-profiler>=4.1",
    "memory-profiler>=0.61",
    "microbench>=0.9",

    # Version management
    "bump-my-version>=0.26",
]

# Jupyter/notebook support
notebook = [
    "jupyter>=1.0",
    "jupyterlab>=4.0",
    "ipykernel>=6.25",
]

# MLOps tools
mlops = [
    "mlflow>=2.10",
]

# GPU support
cuda = [
    "jax[cuda12]>=0.4.20",
]

# All optional dependencies
all = [
    "esgaliant[dev,notebook,mlops,cuda]",
]

[project.urls]
Homepage = "https://github.com/patrickCMartin/esgaliant"
Repository = "https://github.com/patrickCMartin/esgaliant"
Issues = "https://github.com/patrickCMartin/esgaliant/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["esgaliant*"]

[tool.setuptools.package-data]
esgaliant = ["py.typed"]

# ============================================================================
# Testing Configuration
# ============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests requiring GPU",
    "integration: marks integration tests",
    "benchmark: marks benchmark tests",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# ============================================================================
# Type Checking
# ============================================================================
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

# External libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "anndata.*",
    "scanpy.*",
    "leidenalg.*",
    "umap.*",
    "sklearn_ann.*",
    "microbench.*",
]
ignore_missing_imports = true

# ============================================================================
# Linting & Formatting
# ============================================================================
[tool.ruff]
line-length = 80
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "PL",     # pylint
    "NPY",    # numpy-specific rules
    "PERF",   # performance
    "RUF",    # ruff-specific
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "PLR0913", # too many arguments
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "PLR0913", "S101"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["esgaliant"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# ============================================================================
# Version Bumping
# ============================================================================
[tool.bumpversion]
current_version = "0.1.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'current_version = "{current_version}"'
replace = 'current_version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/esgaliant/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = 'release = "{current_version}"'
replace = 'release = "{new_version}"'

[[tool.bumpversion.files]]
filename = "README.md"
search = "Version {current_version}"
replace = "Version {new_version}"

[[tool.bumpversion.files]]
filename = "flake.nix"
search = 'version = "{current_version}";'
replace = 'version = "{new_version}";'
